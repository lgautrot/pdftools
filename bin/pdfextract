#!/usr/bin/perl
use strict;
use warnings;
use PDF::API2;
use Getopt::Long;
use Pod::Usage;

my ( $verbose, $range, $help, $output, $input, $force );
GetOptions(
    "verbose"  => \$verbose,
    "range=s"  => \$range,
    "help"     => \$help,
    "output=s" => \$output,
    "input=s"  => \$input,
    "force"    => \$force,
);

# How can we use this?
pod2usage(1) if $help or not( $output and $input and $range );

# process range
my @pages = ();
my @items = split /,/, $range;

foreach my $item (@items) {
    if ( $item =~ m/^\d+$/ ) {
        push @pages, $item;
    }
    elsif ( $item =~ m/^(\d+)-(\d+)$/ ) {
        push @pages, $1 .. $2;
    }
    else {
        warn "skipping garbage: '$item'\n";
    }
}

# process pages
my $old_pdf = PDF::API2->open($input);
my $new_pdf = PDF::API2->new();
print "read '$input': ", $old_pdf->pages, " pages\n" if $verbose;

for my $page_num (@pages) {
    warn "skipping page #$page_num", next if $page_num > $old_pdf->pages;
    print "adding page #$page_num\n" if $verbose;
    my $page = $new_pdf->importpage( $old_pdf, $page_num );
}

if ( -f $output and not $force ) {
    warn "'$output' already exists, won't overwrite without '--force'.\n";
}
elsif ( -e $output and not -f $output ) {
    warn "'$output' is not a regular file. Please check.\n";
}
elsif ( not -e $output or ( -f $output and $force ) ) {
    print "wrote '$output': ", $new_pdf->pages, " pages\n" if $verbose;
    $new_pdf->saveas($output);
}

$new_pdf->end();
$old_pdf->end();

__END__

=head1 NAME

pdfextract - extracts pages from a PDF file

=head1 DESCRIPTION

This program is intended to extract some pages or a range from a PDF file
passed as argument on the command-line then produce one PDF file.

=head1 SYNOPSIS

 pdfextract [--verbose|-v] [-f|--force] [-r|--range <range>] [-i|--input <input file>] [-o|--output <output file>]
 pdfextract [-h|--help]

=head1 OPTIONS

=over 4

=item -r|--range    specify a range

=item -i|--input    specify an input file

=item -o|--output   specify an output file

=item -v|--verbose  be verbose

=item -f|--force    overwrite output file if needed

=item -h|--help     print this help message

=back

=head1 ARGUMENTS

=over 4

=item range

Can be in the form of:

 1,2,3,5,6

Or:

 1-5

Or a mix of both:

 1-3,5,6

=back

=head1 BUGS

Of course. I mean, possibly. If you find some, please drop me an email about
that.

=head1 COPYRIGHT

pdfextract is Copyright (C) 2008-2010, Laurent Gautrot

This program is free software; you can redistribute it or modify it under the
same terms as Perl itself.

=head1 AUTHOR

Laurent Gautrot <l.gautrot@free.fr>

=cut
